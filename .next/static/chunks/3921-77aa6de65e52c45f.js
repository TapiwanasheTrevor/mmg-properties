"use strict";(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[3921],{63921:function(t,r,e){e.d(r,{fj:function(){return i},getLease:function(){return c},rV:function(){return l}});var n=e(5978),a=e(17293),o=e(87881);let s=(0,n.hJ)(a.db,"leases"),c=async t=>{try{let r=(0,n.JU)(a.db,"leases",t),e=await (0,n.QT)(r);if(e.exists())return{id:e.id,...e.data()};return null}catch(t){throw console.error("Error getting lease:",t),t}},i=async t=>{try{let r=await c(t);if(!r)throw Error("Lease not found");"active"===r.status&&await (0,o.hk)(r.tenantId);let e=(0,n.JU)(a.db,"leases",t);await (0,n.oe)(e)}catch(t){throw console.error("Error deleting lease:",t),t}},l=async function(){let t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};try{let r=(0,n.IO)(s);t.tenantId&&(r=(0,n.IO)(r,(0,n.ar)("tenantId","==",t.tenantId))),t.unitId&&(r=(0,n.IO)(r,(0,n.ar)("unitId","==",t.unitId))),t.propertyId&&(r=(0,n.IO)(r,(0,n.ar)("propertyId","==",t.propertyId))),t.status&&(r=(0,n.IO)(r,(0,n.ar)("status","==",t.status))),r=(0,n.IO)(r,(0,n.Xo)("createdAt","desc")),t.pageSize&&(r=(0,n.IO)(r,(0,n.b9)(t.pageSize)));let e=await (0,n.PL)(r),a=[];return e.forEach(t=>{a.push({id:t.id,...t.data()})}),{leases:a,hasMore:e.docs.length===(t.pageSize||0)}}catch(t){throw console.error("Error getting leases:",t),t}}},87881:function(t,r,e){e.d(r,{yO:function(){return p},ax:function(){return f},hk:function(){return g},BF:function(){return y}});var n=e(5978),a=e(17293);e(60062);var o=e(48984);let s=(0,n.hJ)(a.db,"units"),c=async t=>{try{let r=(0,n.JU)(a.db,"units",t),e=await (0,n.QT)(r);if(e.exists())return{id:e.id,...e.data()};return null}catch(t){throw console.error("Error getting unit:",t),t}},i=async t=>{try{let r=(0,n.IO)(s,(0,n.ar)("propertyId","==",t),(0,n.Xo)("label")),e=await (0,n.PL)(r),a=[];return e.forEach(t=>{a.push({id:t.id,...t.data()})}),a}catch(t){throw console.error("Error getting units by property:",t),t}},l=async(t,r,e)=>{try{let o=(0,n.JU)(a.db,"units",t),s={currentTenantId:r,currentLeaseId:e,status:r?"occupied":"vacant",updatedAt:(0,n.Bt)()};await (0,n.r7)(o,s);let i=await c(t);i&&await u(i.propertyId)}catch(t){throw console.error("Error updating unit tenant:",t),t}},u=async t=>{try{let r=await i(t),e=r.filter(t=>"occupied"===t.status).length;await (0,o.zI)(t,r.length,e)}catch(t){throw console.error("Error updating property occupancy stats:",t),t}},d=(0,n.hJ)(a.db,"tenants"),h=async t=>{try{let r=(0,n.JU)(a.db,"tenants",t),e=await (0,n.QT)(r);if(e.exists())return{id:e.id,...e.data()};return null}catch(t){throw console.error("Error getting tenant:",t),t}},w=async(t,r)=>{try{let e=(0,n.JU)(a.db,"tenants",t);await (0,n.r7)(e,r)}catch(t){throw console.error("Error updating tenant:",t),t}},p=async t=>{try{let r=await h(t);if(!r)throw Error("Tenant not found");r.currentUnit&&await l(r.currentUnit,null,null);let e=(0,n.JU)(a.db,"tenants",t);await (0,n.oe)(e)}catch(t){throw console.error("Error deleting tenant:",t),t}},f=async function(){let t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};try{let r=(0,n.IO)(d);t.status&&(r=(0,n.IO)(r,(0,n.ar)("status","==",t.status))),r=(0,n.IO)(r,(0,n.Xo)("createdAt","desc")),t.pageSize&&(r=(0,n.IO)(r,(0,n.b9)(t.pageSize))),t.lastDoc&&(r=(0,n.IO)(r,(0,n.TQ)(t.lastDoc)));let e=await (0,n.PL)(r),a=[];e.forEach(t=>{a.push({id:t.id,...t.data()})});let o=a;if(t.searchTerm){let r=t.searchTerm.toLowerCase();o=a.filter(t=>t.personalInfo.idNumber.toLowerCase().includes(r)||t.personalInfo.occupation.toLowerCase().includes(r)||t.personalInfo.emergencyContact.name.toLowerCase().includes(r))}return t.propertyId,{tenants:o,lastDoc:e.docs[e.docs.length-1],hasMore:e.docs.length===(t.pageSize||0)}}catch(t){throw console.error("Error getting tenants:",t),t}},y=async function(t){let r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:10;try{let e=await f({pageSize:100}),n=t.toLowerCase();return e.tenants.filter(t=>t.personalInfo.idNumber.toLowerCase().includes(n)||t.personalInfo.occupation.toLowerCase().includes(n)||t.personalInfo.emergencyContact.name.toLowerCase().includes(n)).slice(0,r)}catch(t){throw console.error("Error searching tenants:",t),t}},g=async t=>{try{let r=await h(t);if(!r||!r.currentUnit)throw Error("Tenant not found or not assigned to a unit");await w(t,{currentUnit:void 0,status:"former"}),await l(r.currentUnit,null,null)}catch(t){throw console.error("Error removing tenant from unit:",t),t}}}}]);