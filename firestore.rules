rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions for role-based access
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function getUserData() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data;
    }
    
    function userExists() {
      return exists(/databases/$(database)/documents/users/$(request.auth.uid));
    }
    
    function hasRole(role) {
      return isAuthenticated() && 
        userExists() &&
        getUserData().role == role;
    }
    
    function hasAnyRole(roles) {
      return isAuthenticated() && 
        userExists() &&
        getUserData().role in roles;
    }
    
    function isActiveUser() {
      return isAuthenticated() && 
        userExists() &&
        getUserData().isActive == true;
    }
    
    // Role-based access shortcuts
    function isAdmin() {
      return hasRole('admin');
    }
    
    function isOwner() {
      return hasRole('owner');
    }
    
    function isAgent() {
      return hasRole('agent');
    }
    
    function isTenant() {
      return hasRole('tenant');
    }
    
    function isStaff() {
      return hasAnyRole(['admin', 'agent']);
    }
    
    function isManagement() {
      return hasAnyRole(['admin', 'owner', 'agent']);
    }
    
    // Users collection - allow users to read/update their own profile
    // Admins can read/update all users
    match /users/{userId} {
      allow read: if isAuthenticated() && (
        request.auth.uid == userId || 
        isAdmin()
      );
      
      allow create: if isAuthenticated() && request.auth.uid == userId;
      
      allow update: if isAuthenticated() && (
        request.auth.uid == userId || 
        isAdmin()
      );
      
      allow delete: if isAdmin();
    }
    
    // Properties collection - role-based access
    match /properties/{propertyId} {
      allow read: if isAuthenticated() && (
        isManagement() ||
        (isTenant() && resource.data.tenantIds != null && request.auth.uid in resource.data.tenantIds)
      );
      
      allow create: if isManagement();
      allow update: if isManagement();
      allow delete: if hasAnyRole(['admin', 'owner']);
    }
    
    // Units collection - role-based access
    match /units/{unitId} {
      allow read: if isAuthenticated() && (
        isManagement() ||
        (isTenant() && resource.data.currentTenantId == request.auth.uid)
      );
      
      allow create: if isManagement();
      allow update: if isManagement();
      allow delete: if hasAnyRole(['admin', 'owner']);
    }
    
    // Leases collection - role-based access
    match /leases/{leaseId} {
      allow read: if isAuthenticated() && (
        isManagement() ||
        (isTenant() && resource.data.tenantId == request.auth.uid)
      );
      
      allow create: if isManagement();
      allow update: if isManagement();
      allow delete: if hasAnyRole(['admin', 'owner']);
    }
    
    // Maintenance collection - role-based access
    match /maintenance/{requestId} {
      allow read: if isAuthenticated() && (
        isManagement() ||
        (isTenant() && resource.data.tenantId == request.auth.uid)
      );
      
      // Tenants can create maintenance requests
      allow create: if isAuthenticated() && (
        isTenant() || isManagement()
      );
      
      // Management can update any request, tenants can only cancel their pending requests
      allow update: if isAuthenticated() && (
        isManagement() ||
        (isTenant() && resource.data.tenantId == request.auth.uid && resource.data.status == 'pending')
      );
      
      allow delete: if hasAnyRole(['admin', 'owner']);
    }
    
    // MaintenanceRequests collection - role-based access (actual collection used by service)
    match /maintenanceRequests/{requestId} {
      allow read: if isAuthenticated() && (
        isManagement() ||
        (isTenant() && resource.data.tenantId == request.auth.uid)
      );
      
      // Tenants can create maintenance requests
      allow create: if isAuthenticated() && (
        isTenant() || isManagement()
      );
      
      // Management can update any request, tenants can only cancel their pending requests
      allow update: if isAuthenticated() && (
        isManagement() ||
        (isTenant() && resource.data.tenantId == request.auth.uid && resource.data.status == 'pending')
      );
      
      allow delete: if hasAnyRole(['admin', 'owner']);
    }
    
    // Payments collection - role-based access
    match /payments/{paymentId} {
      allow read: if isAuthenticated() && (
        isManagement() ||
        (isTenant() && resource.data.tenantId == request.auth.uid)
      );
      
      allow create: if isManagement();
      allow update: if isManagement();
      allow delete: if isAdmin();
    }
    
    // Transactions collection - role-based access
    match /transactions/{transactionId} {
      allow read: if isAuthenticated() && (
        isManagement() ||
        (isTenant() && resource.data.tenantId == request.auth.uid)
      );
      
      allow create: if isManagement();
      allow update: if isManagement();
      allow delete: if isAdmin();
    }
    
    // Notifications collection - users can only access their own
    match /notifications/{notificationId} {
      allow read: if isAuthenticated() && (
        resource.data.userId == request.auth.uid ||
        isAdmin()
      );
      
      allow create: if isAuthenticated();
      
      allow update: if isAuthenticated() && (
        resource.data.userId == request.auth.uid ||
        isAdmin()
      );
      
      allow delete: if isAuthenticated() && (
        resource.data.userId == request.auth.uid ||
        isAdmin()
      );
    }
    
    // Tenants collection - role-based access
    match /tenants/{tenantId} {
      allow read: if isAuthenticated() && (
        isManagement() ||
        (isTenant() && resource.data.userId == request.auth.uid)
      );
      
      allow create: if isManagement();
      allow update: if isManagement();
      allow delete: if isAdmin();
    }
    
    // Agents collection - role-based access
    match /agents/{agentId} {
      allow read: if isAuthenticated() && (
        isManagement() ||
        (isAgent() && resource.data.userId == request.auth.uid)
      );
      
      allow create: if hasAnyRole(['admin', 'owner']);
      allow update: if hasAnyRole(['admin', 'owner']);
      allow delete: if isAdmin();
    }
    
    // Owners collection - role-based access
    match /owners/{ownerId} {
      allow read: if isAuthenticated() && (
        isAdmin() ||
        (isOwner() && resource.data.userId == request.auth.uid)
      );
      
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }
    
    // Inspections collection - role-based access
    match /inspections/{inspectionId} {
      allow read: if isAuthenticated() && (
        isManagement() ||
        (isTenant() && resource.data.unitId != null && resource.data.tenantId == request.auth.uid)
      );
      
      allow create: if isManagement();
      allow update: if isManagement();
      allow delete: if hasAnyRole(['admin', 'owner']);
    }
    
    // Messages collection - users can access their conversations
    match /messages/{messageId} {
      allow read: if isAuthenticated() && (
        resource.data.senderId == request.auth.uid ||
        request.auth.uid in resource.data.recipients ||
        isAdmin()
      );
      
      allow create: if isAuthenticated();
      
      allow update: if isAuthenticated() && (
        resource.data.senderId == request.auth.uid ||
        request.auth.uid in resource.data.recipients ||
        isAdmin()
      );
      
      allow delete: if isAuthenticated() && (
        resource.data.senderId == request.auth.uid ||
        isAdmin()
      );
    }
    
    // Conversations collection - users can access their conversations
    match /conversations/{conversationId} {
      allow read: if isAuthenticated() && (
        request.auth.uid in resource.data.participants ||
        isAdmin()
      );
      
      allow create: if isAuthenticated();
      
      allow update: if isAuthenticated() && (
        request.auth.uid in resource.data.participants ||
        isAdmin()
      );
      
      allow delete: if isAdmin();
    }
    
    // Typing indicators - all authenticated users can read/write
    match /typing/{typingId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      allow update: if isAuthenticated();
      allow delete: if isAuthenticated();
    }
    
    // Message drafts - users can only access their own
    match /drafts/{draftId} {
      allow read, write: if isAuthenticated() && 
        resource.data.userId == request.auth.uid;
    }
    
    // Documents collection - role-based access
    match /documents/{documentId} {
      allow read: if isAuthenticated() && (
        isManagement() ||
        (isTenant() && resource.data.tenantId == request.auth.uid)
      );
      
      allow create: if isManagement();
      allow update: if isManagement();
      allow delete: if hasAnyRole(['admin', 'owner']);
    }
    
    // Settings collection - role-based access
    match /settings/{settingId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }
    
    // Analytics collection - management only
    match /analytics/{docId} {
      allow read: if isManagement();
      allow write: if isAdmin();
    }
    
    // Audit logs - admin only
    match /audit_logs/{logId} {
      allow read: if isAdmin();
      allow create: if isAuthenticated();
      allow update: if false; // Audit logs should never be updated
      allow delete: if false; // Audit logs should never be deleted
    }
    
    // Agent locations - for tracking field agents
    match /agent_locations/{locationId} {
      allow read: if isManagement();
      allow write: if isAgent() || isAdmin();
    }
    
    // Property visits - for tracking agent visits
    match /property_visits/{visitId} {
      allow read: if isManagement();
      allow write: if isAgent() || isAdmin();
    }
    
    // Budgets collection - management only
    match /budgets/{budgetId} {
      allow read: if isManagement();
      allow write: if hasAnyRole(['admin', 'owner']);
    }
    
    // Expense categories - readable by all, writable by admin
    match /expense_categories/{categoryId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }
    
    // Default deny all other access
    match /{document=**} {
      allow read, write: if false;
    }
  }
}